import {
  core.channel {make-channel, receive, send},
  core.foreign {sleep},
  core.list {length},
}

define test-syntax(): unit {
  let _ = thread(type);
  let _ = (thread(type)) -> type;
  let _ = (type) -> thread(type);
  let _ = (thread(type), thread(type)) -> (thread(type)) -> thread(type);
  let _ = thread(thread(type));
  let _ = detach {Unit};
  let _ =
    detach {
      let _ = Unit;
      let _ = Unit;
      Unit
    };
  let _ =
    function () {
      let fl =
        detach {
          let _ = Unit;
          Unit
        };
      Unit;
      attach {fl}
    };
  let _ =
    function (fl: thread(unit)) {
      attach {
        let _ = Unit;
        fl
      }
    };
  Unit
}

define some-list(len: int, acc: list(int)): list(int) {
  if eq-int(len, 0) {
    acc
  } else {
    let val = len;
    some-list(sub-int(len, 1), Cons(val, acc))
  }
}

define detach-send(x: int, ch: &channel(int)): thread(unit) {
  detach {send(ch, quote {x})}
}

define send-all(xs: list(int), ch: &channel(int), acc: list(thread(unit))): list(thread(unit)) {
  match xs {
  | Nil =>
    acc
  | Cons(y, rest) =>
    let fl = detach-send(y, ch);
    send-all(rest, ch, Cons(fl, acc))
  }
}

define receive-one-by-one(xs: list(thread(unit)), ch: &channel(int)): unit {
  match xs {
  | Nil =>
    Unit
  | Cons(fl, rest) =>
    let _ = attach {fl};
    let _ = receive(ch);
    receive-one-by-one(rest, ch)
  }
}

define receive-all-at-once(xs: list(thread(unit)), ch: &channel(int)): unit {
  let wait-all =
    define wait-all(ys: list(thread(unit))) {
      match ys {
      | Nil =>
        Unit
      | Cons(z, zs) =>
        let _ = attach {z};
        wait-all(zs)
      }
    };
  let size on xs = length(xs);
  wait-all(xs);
  let receive-all =
    define receive-all(count: int) {
      if eq-int(count, 0) {
        Unit
      } else {
        let _ = receive(ch);
        receive-all(sub-int(count, 1))
      }
    };
  receive-all(size)
}

define test-behavior(): unit {
  let ch = make-channel();
  let _ on ch = {
    let fl1 = {
      detach {
        let xs = some-list(1000, List[]);
        let fs = send-all(xs, ch, List[]);
        receive-one-by-one(fs, ch);
        Unit
      }
    };
    let fl2 = {
      detach {
        let xs = some-list(1000, List[]);
        let fs = send-all(xs, ch, List[]);
        receive-all-at-once(fs, ch);
        Unit
      }
    };
    attach {fl1};
    attach {fl2}
  };
  let _ = ch;
  let ch = make-channel();
  let !ch: channel(int) = ch;
  let _ = !ch;
  let _ on !ch = send(!ch, quote {1});
  let ch = !ch;
  let ch-clone = ch;
  let _ on ch-clone = send(ch-clone, quote {1});
  let tmp on ch-clone = {
    let f = {
      detach {
        let _ = sleep(1);
        send(ch-clone, quote {3})
      }
    };
    let g = {
      detach {
        let _ = sleep(1);
        send(ch-clone, quote {4})
      }
    };
    let _ = receive(ch-clone);
    let _ = receive(ch-clone);
    let _ = receive(ch-clone);
    attach {f};
    attach {g}
  };
  let _ = ch-clone;
  let _ = tmp;
  Unit
}

define main(): unit {
  test-syntax();
  test-behavior();
  Unit
}

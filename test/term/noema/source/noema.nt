import {
  core.box {axiom-T},
  core.cell {clone, make-cell, mutate},
  core.list {length},
}

define test-syntax(): unit {
  let _ = &list(type);
  let _ = &list(&list(type));
  let _ = (&type, &list((&list(type)) -> &list(type))) -> &list(type);
  let xs: list(int) = List[1, 2, 3];
  let _ on xs = {
    let _ on xs = {
      let l1 = length(*xs);
      let l2 = length(*xs);
      add-int(l1, l2)
    };
    let _ = length(xs);
    let !xs-copy = *xs;
    let _ = xs;
    let _ = xs;
    let _ = xs;
    let _ = !xs-copy;
    let _ = !xs-copy;
    let _ = !xs-copy;
    case xs {
    | Nil =>
      length(xs)
    | Cons(_, ys) =>
      length(ys)
    }
  };
  let !xs = xs;
  // let _ = xs;
  let ys = !xs;
  let zs = !xs;
  let _ on !xs, ys, zs = {
    let v1 = length(!xs);
    let v2 = length(ys);
    let v3 = length(zs);
    add-int(v1, add-int(v2, v3))
  };
  let _ = !xs;
  let _ = ys;
  let _ = zs;
  Unit
}

data term(a) {
| Var(a)
| Abs(a, term(a))
| App(term(a), term(a))
}

data my-enum {
| Foo
| Bar
}

define nested-enum-match(t: &term(my-enum)): term(my-enum) {
  let val =
    case t {
    | App(Abs(x, !t'), Var(e)) =>
      let _ = Var(e);
      let !t' = *!t';
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = x;
      let _ = Var(e);
      let _ = x;
      Bar
    | App(Abs(x, _), App(Var(_), App(_, App(w, _)))) =>
      let !foo = *w;
      let _ = !foo;
      let _ = !foo;
      let _ = !foo;
      let _ = !foo;
      let _ = x;
      Foo
    | App(Abs(_, _), App(App(_, App(_, _)), Var(_))) =>
      Bar
    | App(App(Abs(_, _), Var(_)), App(App(Abs(_, _), App(_, _)), Var(_))) =>
      Foo
    | App(App(Abs(_, _), Var(_)), App(App(_, App(_, _)), Var(_))) =>
      Bar
    | t =>
      let !t = *t;
      let _ = !t;
      let _ = !t;
      let _ = !t;
      Foo
    };
  match val {
  | Foo =>
    let _ = val;
    *t
  | Bar =>
    *t
  }
}

define unbalanced-freevars-in-branches(a: type, t: &term(a)): term(a) {
  let !foo = Var("test");
  let f =
    function () {
      !foo
    };
  let g =
    function () {
      !foo
    };
  let h =
    function () {
      !foo
    };
  case t {
  | Var(x) =>
    let _ = f;
    case t {
    | Var(_) =>
      let _ = g;
      let _ = x;
      *t
    | Abs(_, t) =>
      let !val = *t;
      let _ = !val;
      let _ = !val;
      let _ = !val;
      let _ = !val;
      !val
    | _ =>
      *t
    }
  | Abs(_, t) =>
    case t {
    | App(_, e2) =>
      *e2
    | _ =>
      let _ = t;
      let _ = t;
      *t
    }
  | App(t1, _) =>
    let _ = g;
    let !k =
      if False {
        h
      } else {
        function () {
          Var("pohe")
        }
      };
    let _ = !k;
    let _ = !k;
    let _ = !k;
    *t1
  }
}

data ctx {
| Ctx(counter: cell(int))
}

define with-ctx(c: &ctx): unit {
  tie Ctx(counter) = c;
  let current-value = clone(counter);
  if eq-int(current-value, 0) {
    print("stop\n")
  } else {
    print("loop\n");
    mutate(counter, function (x) {
      quote {sub-int(axiom-T(x), 1)}
    });
    with-ctx(c)
  }
}

define test-resource(): unit {
  let t1 = Var(Foo);
  let t2 = Abs(Bar, Var(Bar));
  let t3 = App(Abs(Bar, Var(Bar)), Var(Foo));
  let t4 = Abs(Bar, App(Var(Bar), Var(Bar)));
  let _ on t1 = nested-enum-match(t1);
  let _ on t2 = nested-enum-match(t2);
  let _ on t3 = nested-enum-match(t3);
  let _ on t4 = nested-enum-match(t4);
  let _ on t1 = unbalanced-freevars-in-branches(_, t1);
  let _ on t2 = unbalanced-freevars-in-branches(_, t2);
  let _ on t3 = unbalanced-freevars-in-branches(_, t3);
  let _ on t4 = unbalanced-freevars-in-branches(_, t4);
  let _ = t1;
  let _ = t2;
  let _ = t3;
  let _ = t4;
  let c = Ctx(make-cell(quote {5}));
  let _ on c = with-ctx(c);
  let _ = c;
  Unit
}

define main(): unit {
  test-syntax();
  test-resource();
  Unit
}

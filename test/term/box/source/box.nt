import {
  core.control {discard},
  core.int.io {print-int-line},
  core.list {length},
}

define axiom-K<a, b>(f: meta (a) -> b, x: meta a): meta b {
  box {
    letbox f' = f;
    letbox x' = x;
    f'(x')
  }
}

define axiom-T<a>(x: meta a): a {
  letbox-T x' = x;
  x'
}

define test-syntax(): unit {
  // box-intro, box-elim
  letbox x = box {Unit};
  let _ = x;
  // box-elim-T
  letbox-T x = box {Unit};
  letbox-T y on x = box x {x};
  letbox-T _ on x, y = {
    let _ = y;
    box x {x}
  };
  letbox-T _ on x = {
    let _ = y;
    box x {x}
  };
  // let-on (= letbox-T + quote)
  let len: int on x = {
    let _: &unit = x;
    1234
  };
  let _ = len;
  let _ = x;
  Unit
}

define test-resource(xs: list(int)): unit {
  // letbox-T
  letbox-T len on xs = quote {length(xs)};
  print-int-line(len);
  // letbox-T + box
  letbox-T len on xs =
    // layer 0
    box xs {
      // layer -1
      let !ys = xs;
      discard(!ys);
      discard(!ys);
      let len on !ys = length(!ys);
      discard(!ys);
      len
    };
  discard(xs);
  print-int-line(len);
  Unit
}

define complex(): () -> unit {
  // layer 0
  let xs: list(int) = List[1, 2, 3, 4];
  letbox-T f on xs =
    // layer 1
    // xs: &list(int) at layer 1
    box xs {
      // layer 0
      // xs: list(int) at layer 0
      function () {
        letbox-T k on xs = {
          // 1
          // xs: &list(int) at layer 1
          let len = length(xs);
          print-int-line(len);
          box {Unit}
        };
        let _ = k;
        let _ = xs;
        Unit
      }
    };
  discard(xs);
  f
}

define main(): unit {
  test-syntax();
  test-resource(List[1, 2, 3]);
  complex()()
}

define zen(): unit {
  main()
}

import {
  core.external {exit},
  core.foreign {get-cpu-count, sleep},
  core.thread.pool,
  this.error.eio {eio},
  this.error.error {Make-Error},
  this.logger.logger-kit {logger-kit},
  this.logger.print {print-log-errors},
}

define run<a>(k: &logger-kit, c: eio(a)): a {
  match c {
  | Left(Make-Error(xs)) =>
    let _ on xs = print-log-errors(k, xs);
    let _ = xs;
    exit(1)
  | Right(v) =>
    v
  }
}

inline for-each-parallel<a, b>(xs: vector(a), f: (a) -> eio(b)): eio(vector(b)) {
  let ys = core.thread.pool.for-each-parallel(get-cpu-count(), xs, f);
  let Pair(errors, results) = core.vector.partition(ys);
  let error-len on errors = core.vector.length(errors);
  if eq-int(error-len, 0) {
    Right(results)
  } else {
    Left(this.error.error.join(errors))
  }
}

define zen(): unit {
  let num-of-elems = mul-int(get-cpu-count(), 2);
  pin tmp =
    for-each-parallel(core.vector.range(0, num-of-elems), function (x) {
      vet("sleep");
      let _ = sleep(1);
      Right(add-int(x, 10))
    });
  vet(tmp)
}

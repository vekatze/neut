import {
  this.code-parser.parser {delimiter, parser, parser-kit},
  this.syntax-tree.comment {comment},
  this.syntax-tree.series {
    Angle,
    Bar,
    Brace,
    Bracket,
    Comma,
    Paren,
    Series,
    container,
    empty-series,
    get-container-pair,
    get-separator-text,
    prefix,
    separator,
    series,
    singleton,
  },
  zonk.make-zonk-kit {make-zonk-kit},
  zonk.parse {get-point, parsed},
  zonk.point {point},
}

inline _parse-series-sep-trail<a, r := rho>(
  k: &parser-kit,
  after-sep: bool,
  con: ?container,
  sep: separator,
  leading-comment: comment,
  !p: parser(pair(a, comment)),
): parsed(series(a)) {
  let f =
    define self<r := rho>(
      k: &parser-kit,
      after-sep: bool,
      con: ?container,
      sep: separator,
      leading-comment: comment,
    ): parsed(series(a)) {
      try _ = r;
      match !p(k) {
      | Right(Pair(v, c)) =>
        match delimiter(k, get-separator-text(sep)) {
        | Right(c-sep) =>
          try rest = self(k, True, con, sep, core.list.append(c, c-sep));
          Right(this.syntax-tree.series.cons(Pair(leading-comment, v), rest))
        | Left(_) =>
          Right(singleton(con, sep, leading-comment, v, c, False))
        }
      | Left(_) =>
        let Series of {elems, prefix, container, separator} = empty-series(con, sep);
        Right(Series of {
          elems,
          trailing-comment := leading-comment,
          prefix,
          container,
          separator,
          has-optional-separator := after-sep,
        })
      }
    };
  try _ = r;
  f(k, after-sep, con, sep, leading-comment)
}

inline _parse-series-sep-by<a, r := rho>(
  k: &parser-kit,
  has-optional-separator: bool,
  con: ?container,
  sep: separator,
  leading-comment: comment,
  !p: parser(pair(a, comment)),
): parsed(series(a)) {
  let f =
    define self<r := rho>(
      k: &parser-kit,
      has-optional-separator: bool,
      con: ?container,
      sep: separator,
      leading-comment: comment,
    ): parsed(series(a)) {
      try _ = r;
      match !p(k) {
      | Right(Pair(v, c)) =>
        match delimiter(k, get-separator-text(sep)) {
        | Right(c-sep) =>
          try rest = self(k, has-optional-separator, con, sep, core.list.append(c, c-sep));
          Right(this.syntax-tree.series.cons(Pair(leading-comment, v), rest))
        | Left(_) =>
          Right(singleton(con, sep, leading-comment, v, c, has-optional-separator))
        }
      | Left(_) =>
        let Series of {elems, prefix, container, separator} = empty-series(con, sep);
        Right(Series of {
          elems,
          trailing-comment := leading-comment,
          prefix,
          container,
          separator,
          has-optional-separator := False,
        })
      }
    };
  try _ = r;
  f(k, has-optional-separator, con, sep, leading-comment)
}

inline _parse-series-sep-lead<a, r := rho>(
  k: &parser-kit,
  con: ?container,
  sep: separator,
  leading-comment: comment,
  p: parser(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  match delimiter(k, get-separator-text(sep)) {
  | Right(c-sep) =>
    _parse-series-sep-by(k, True, con, sep, core.list.append(leading-comment, c-sep), p)
  | Left(_) =>
    _parse-series-sep-by(k, False, con, sep, leading-comment, p)
  }
}

inline _parse-series-and<a, r := rho>(
  k: &parser-kit,
  con: ?container,
  leading-comment: comment,
  p: parser(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  _parse-series-sep-trail(k, False, con, Comma, leading-comment, p)
}

inline _parse-series-or<a, r := rho>(
  k: &parser-kit,
  con: ?container,
  leading-comment: comment,
  p: parser(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  _parse-series-sep-lead(k, con, Bar, leading-comment, p)
}

inline _parse-series<a, r := rho>(
  k: &parser-kit,
  con: ?container,
  sep: separator,
  leading-comment: comment,
  p: parser(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  match sep {
  | Comma =>
    _parse-series-and(k, con, leading-comment, p)
  | Bar =>
    _parse-series-or(k, con, leading-comment, p)
  }
}

inline parse-series<a, r := rho>(
  k: &parser-kit,
  prefix: prefix,
  con: container,
  sep: separator,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  try _ = r;
  let Pair(open, close) = get-container-pair(con);
  try c1 = delimiter(k, open);
  try se = _parse-series(k, Right(con), sep, c1, p);
  try c2 = delimiter(k, close);
  let Series of {elems, trailing-comment, container, separator, has-optional-separator} = se;
  let se =
    Series of {
      elems,
      trailing-comment,
      prefix,
      container,
      separator,
      has-optional-separator,
    };
  Right(Pair(se, c2))
}

data locpack(a) {
| Locpack(
    series(a),
    point,
    comment,
  )
}

inline parse-series-with-loc<a, r := rho>(
  k: &parser-kit,
  prefix: prefix,
  con: container,
  sep: separator,
  p: parser(pair(a, comment)),
): parsed(locpack(a)) {
  try _ = r;
  let Pair(open, close) = get-container-pair(con);
  try c1 = delimiter(k, open);
  try se = _parse-series(k, Right(con), sep, c1, p);
  let loc = get-point(k);
  try c2 = delimiter(k, close);
  let Series of {elems, trailing-comment, container, separator, has-optional-separator} = se;
  let se =
    Series of {
      elems,
      trailing-comment,
      prefix,
      container,
      separator,
      has-optional-separator,
    };
  Right(Locpack(se, loc, c2))
}

inline parse-bare-series<a, r := rho>(
  k: &parser-kit,
  prefix: prefix,
  sep: separator,
  p: parser(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  try se = _parse-series(k, none, sep, Nil, p);
  let Series of {elems, trailing-comment, container, separator, has-optional-separator} = se;
  let se =
    Series of {
      elems,
      trailing-comment,
      prefix,
      container,
      separator,
      has-optional-separator,
    };
  Right(se)
}

inline parse-series-paren<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  parse-series(k, none, Paren, Comma, p)
}

inline parse-series-paren-with-loc<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(locpack(a)) {
  parse-series-with-loc(k, none, Paren, Comma, p)
}

inline parse-series-brace<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  parse-series(k, none, Brace, Comma, p)
}

inline parse-series-brace-with-loc<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(locpack(a)) {
  parse-series-with-loc(k, none, Brace, Comma, p)
}

inline parse-series-bracket<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  parse-series(k, none, Bracket, Comma, p)
}

inline parse-series-angle<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  parse-series(k, none, Angle, Comma, p)
}

inline parse-series-brace-list<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(pair(series(a), comment)) {
  parse-series(k, none, Brace, Bar, p)
}

inline parse-series-brace-list-with-loc<a>(
  k: &parser-kit,
  p: parser(pair(a, comment)),
): parsed(locpack(a)) {
  parse-series-with-loc(k, none, Brace, Bar, p)
}

define zen(): unit {
  pin k = make-zonk-kit(*"{}", *"path/to/file.nt");
  pin foo =
    parse-series-brace(k, function (_) {
      Right(Pair(Unit, Nil))
    });
  vet(foo);
  pin k = make-zonk-kit(*"[  ]  ", *"path/to/file.nt");
  pin foo =
    parse-series-bracket(k, function (_) {
      Right(Pair(Unit, Nil))
    });
  vet(foo);
  pin k = make-zonk-kit(*"(, )  ", *"path/to/file.nt");
  pin foo =
    parse-series-paren-with-loc(k, function (_) {
      Right(Pair(Unit, Nil))
    });
  vet(foo);
  pin k = make-zonk-kit(*"{| }  ", *"path/to/file.nt");
  pin foo =
    parse-series-brace-list(k, function (_) {
      Right(Pair(Unit, Nil))
    });
  vet(foo);
}

import {
  this.code-parser.parser {delimiter},
  this.syntax-tree.comment {comment},
  this.syntax-tree.series {Series, container, empty-series, get-separator-text, separator, series, singleton},
  zonk.parse {parsed, zonk},
  zonk.zonk-kit {zonk-kit},
}

define _parse-series-sep-trail<a, r := rho>(
  k: &zonk-kit,
  after-comma: bool,
  con: ?container,
  sep: separator,
  leading-comment: comment,
  p: &zonk(pair(a, comment)),
): parsed(series(a)) {
  try _ = r;
  match p(k) {
  | Right(Pair(v, c)) =>
    match delimiter(k, get-separator-text(sep)) {
    | Right(c-sep) =>
      try rest = _parse-series-sep-trail(k, True, con, sep, core.list.append(c, c-sep), p);
      Right(this.syntax-tree.series.cons(Pair(leading-comment, v), rest))
    | Left(_) =>
      Right(singleton(con, sep, leading-comment, v, c))
    }
  | Left(_) =>
    let Series of {elems, prefix, container, separator} = empty-series(con, sep);
    Right(Series of {
      elems,
      trailing-comment := leading-comment,
      prefix,
      container,
      separator,
      has-optional-separator := after-comma,
    })
  }
}

import {
  core.ansi {Bold},
  core.list {for-each-N},
  this.color.text {Empty, color-text, join, packed, packed', packed-N'},
  this.logger.hint {hint, show-file-pos},
  this.logger.log-level {_log-level-to-pad, _log-level-to-text, _log-level-to-tone, log-level},
}

data log {
| Log(
    position: ?hint,
    level: log-level,
    content: text,
  )
}

define _show-position(h: &?hint): color-text {
  case h {
  | Left(_) =>
    Empty
  | Right(h) =>
    join(packed(Vector[Bold], show-file-pos(h)), packed'(*"\n"))
  }
}

define _show-level(l: log-level): color-text {
  packed(_log-level-to-tone(l), core.text.append(_log-level-to-text(l), ": "))
}

define _show-content(level: log-level, content: text): color-text {
  let adjusted-content = {
    let lines on content = core.text.split(content, "\n");
    match lines {
    | Nil =>
      packed'(content)
    | Cons(head, tail) =>
      let pad = _log-level-to-pad(level);
      let tail' on tail, pad =
        for-each-N(tail, function (t) {
          core.text.append(pad, t)
        });
      let _ = pad;
      let _ = tail;
      let tmp = core.text.intercalate(Cons(head, tail'), *"\n");
      packed'(tmp)
    }
  };
  join(adjusted-content, packed-N'("\n"))
}

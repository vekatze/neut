import {
  sero.decode {decode},
  sero.encode {encode},
  sero.get-kit {get-kit},
  sero.instance.bool {bool-sero},
  sero.instance.int64 {int64-sero},
  sero.instance.text {text-sero},
  sero.put-kit {put-kit},
  sero.sero {Sero, sero},
  this.logger.hint {Hint, Saved-Hint, hint},
}

define _put(k: &put-kit, v: &hint): unit {
  let Sero of {put := !put-text} = text-sero;
  let Sero of {put := !put-int} = int64-sero;
  let Sero of {put := !put-bool} = bool-sero;
  case v {
  | Hint of {file-path, line, column, should-save-location} =>
    !put-text(k, *file-path);
    !put-int(k, line);
    !put-int(k, column);
    !put-bool(k, should-save-location)
  | Saved-Hint of {file-path, line, column, should-save-location} =>
    !put-text(k, file-path);
    !put-int(k, line);
    !put-int(k, column);
    !put-bool(k, should-save-location)
  }
}

define _get(k: &get-kit): ?meta hint {
  let Sero of {get := !get-text} = text-sero;
  let Sero of {get := !get-int} = int64-sero;
  let Sero of {get := !get-bool} = bool-sero;
  try file-path = !get-text(k);
  try line = !get-int(k);
  try column = !get-int(k);
  try should-save-location = !get-bool(k);
  Right(box {
    letbox file-path = file-path;
    letbox line = line;
    letbox column = column;
    letbox should-save-location = should-save-location;
    Saved-Hint of {file-path, line, column, should-save-location}
  })
}

inline hint-sero: sero(hint) {
  Sero of {
    put := _put,
    get := _get,
  }
}

define zen(): unit {
  pin val =
    Hint of {
      file-path := "/path/to/file.txt",
      line := 123,
      column := 42,
      should-save-location := True,
    };
  match decode(hint-sero, encode(hint-sero, val, 8)) {
  | Left(_) =>
    print("error\n")
  | Right(h) =>
    pin h = h;
    vet(h)
  }
}

import {
  core.float.parse,
  core.int.parse,
  this.code-parser.parser {symbol},
  this.ens.ens {E-Float, E-Int, ens},
  this.logger.hint {hint, internal-hint},
  this.syntax-tree.comment {comment},
  zonk.make-zonk-kit {make-zonk-kit},
  zonk.parse {parsed, report-unexpected-input},
  zonk.zonk-kit {zonk-kit},
}

define _parse-int<r := rho>(k: &zonk-kit): parsed(pair(int, comment)) {
  try _ = r;
  try Pair(s, c) = symbol(k);
  let _ on s = vet(s);
  let int-or-none on s = core.int.parse.parse-int(s);
  let _ = s;
  match int-or-none {
  | Right(v) =>
    Right(Pair(v, c))
  | Left(_) =>
    report-unexpected-input("int")
  }
}

define _parse-float<r := rho>(k: &zonk-kit): parsed(pair(float, comment)) {
  try _ = r;
  try Pair(s, c) = symbol(k);
  let _ on s = vet(s);
  let float-or-none on s = core.float.parse.parse-float(s);
  let _ = s;
  match float-or-none {
  | Right(v) =>
    Right(Pair(v, c))
  | Left(_) =>
    report-unexpected-input("float")
  }
}

define _parse-bool<r := rho>(k: &zonk-kit): parsed(pair(bool, comment)) {
  try _ = r;
  try Pair(s, c) = symbol(k);
  let is-true on s = eq-text(s, "true");
  if is-true {
    Right(Pair(True, c))
  } else {
    let is-false on s = eq-text(s, "false");
    let _ = s;
    if is-false {
      Right(Pair(False, c))
    } else {
      report-unexpected-input("bool")
    }
  }
}

define _parse-int-ens<r := rho>(k: &zonk-kit, m: hint): parsed(pair(ens, comment)) {
  try _ = r;
  try Pair(x, c) = _parse-int(k);
  Right(Pair(E-Int(m, x), c))
}

define _parse-float-ens<r := rho>(k: &zonk-kit, m: hint): parsed(pair(ens, comment)) {
  try _ = r;
  try Pair(x, c) = _parse-float(k);
  Right(Pair(E-Float(m, x), c))
}

define zen(): unit {
  pin k = make-zonk-kit(*"1234");
  pin v = _parse-int(k);
  vet(v);
  pin k = make-zonk-kit(*"1234.5678");
  pin v = _parse-float(k);
  vet(v);
  pin k = make-zonk-kit(*"true // hello");
  pin v = _parse-bool(k);
  vet(v);
  pin k = make-zonk-kit(*"false");
  pin v = _parse-bool(k);
  vet(v);
  pin k = make-zonk-kit(*"1234");
  pin v = _parse-int-ens(k, internal-hint);
  vet(v);
}

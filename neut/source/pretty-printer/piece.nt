import {
  core.list {fold-left-N, for-each},
  this.pretty-printer.doc {Empty, _is-multi, doc, indent, join, join-doc-list, line, nest},
}

data piece {
| Piece(
    content: doc,
    single-modifier: (doc) -> doc,
    multi-modifier: (doc) -> doc,
  )
}

define _remove-nil(ps: list(piece)): list(piece) {
  match ps {
  | Nil =>
    Nil
  | Cons(p, rest) =>
    let Piece(c, f, g) = p;
    match c {
    | Empty =>
      _remove-nil(rest)
    | c =>
      Cons(Piece(c, f, g), _remove-nil(rest))
    }
  }
}

define _apply-single(p: piece): doc {
  let Piece(c, f, _) = p;
  f(c)
}

define _apply-multi(p: piece): doc {
  let Piece(c, _, g) = p;
  g(c)
}

define arrange-vertical(ps: list(piece)): doc {
  join-doc-list(for-each(ps, _apply-multi))
}

define arrange(ps: list(piece)): doc {
  let b on ps =
    fold-left-N(False, ps, function (acc, p) {
      if acc {
        acc
      } else {
        tie Piece(c, _, _) = p;
        _is-multi(c)
      }
    });
  if b {
    arrange-vertical(ps)
  } else {
    join-doc-list(for-each(ps, _apply-single))
  }
}

define _id(d: doc): doc {
  d
}

define _append-newline(d: doc): doc {
  join[d, line]
}

define container(content: doc): piece {
  Piece of {
    content,
    single-modifier := _id,
    multi-modifier := _append-newline,
  }
}

define nested(content: doc): piece {
  Piece of {
    content,
    single-modifier := {
      function (d) {
        join[nest(indent, join[line, d]), line]
      }
    },
    multi-modifier := {
      function (d) {
        join[nest(indent, join[line, d]), line]
      }
    },
  }
}

import {
  core.either {map-right},
  this.kernel.common.local-var-tree {local-var-tree},
  this.kernel.common.location-tree {location-tree},
  this.kernel.common.raw-import-summary {raw-import-summary},
  this.kernel.common.top-candidate {top-candidate},
  this.language.term.compress {compress, compress-binder, compress-stmt-kind},
  this.language.term.stmt {Stmt-Define, stmt, stripped-stmt},
  this.logger.log {log},
}

data cache {
| Cache(
    stmt-list: list(stmt),
    remark-list: list(log),
    count-snapshot: int,
  )
}

data low-cache {
| Low-Cache(
    stmt-list: list(stripped-stmt),
    remark-list: list(log),
    count-snapshot: int,
  )
}

data completion-cache {
| Completion-Cache(
    local-var-tree: local-var-tree,
    top-candidates: list(top-candidate),
    raw-import-summary: ?raw-import-summary,
  )
}

data location-cache {
| Location-Cache(
    location-tree: location-tree,
  )
}

define _compress-stmt(s: stmt): stripped-stmt {
  match s {
  | Stmt-Define(is-const-like, stmt-kind, m, name, imp-params, exp-params, cod, e) =>
    let stmt-kind = compress-stmt-kind(stmt-kind);
    let imp-params =
      core.list.for-each(imp-params, function (p) {
        let Pair(param, none-or-default) = p;
        Pair(compress-binder(param), map-right(none-or-default, compress))
      });
    let exp-params = core.list.for-each(exp-params, compress-binder);
    let cod = compress(cod);
    let e = compress(e);
    Stmt-Define(is-const-like, stmt-kind, m, name, imp-params, exp-params, cod, e)
  }
}

import {
  core.list {for-each},
  core.process {Process-Spec, process-spec},
  core.text {intercalate, split},
  core.text-builder {append-int64-UTF8, append-text, make-text-builder},
  this.logger.logger-kit {logger-kit},
}

data run-process-kit {
| _Run-Process-Kit(
    logger-kit: logger-kit,
  )
}

define make-run-process-kit(logger-kit: logger-kit) {
  _Run-Process-Kit(logger-kit)
}

data spec {
| Spec(
    cmd-spec: process-spec,
    cwd: ?text,
  )
}

data command-error {
| Command-Error(
    spec: spec,
    exit-code: int,
    err-str: text,
  )
}

data process-error {
| Command-Execution-Error(command-error)
| Setup-Error(text)
}

// T.intercalate "\n" $ map ("  " <>) $ T.splitOn "\n" t
define _indent(t: &text): text {
  let ts = split(t, "\n");
  let ts =
    for-each(ts, function (t) {
      pin t = t;
      core.text.append("  ", t)
    });
  intercalate(ts, *"\n")
}

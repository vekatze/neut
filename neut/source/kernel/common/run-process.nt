import {
  core.list {for-each},
  core.process {Process-Spec, process-spec},
  core.text {intercalate, split},
  core.text-builder {append-int64-UTF8, append-text, make-text-builder},
  this.logger.logger-kit {logger-kit},
}

data run-process-kit {
| _Run-Process-Kit(
    logger-kit: logger-kit,
  )
}

define make-run-process-kit(logger-kit: logger-kit) {
  _Run-Process-Kit(logger-kit)
}

data spec {
| Spec(
    cmd-spec: process-spec,
    cwd: ?text,
  )
}

data command-error {
| Command-Error(
    spec: spec,
    exit-code: int,
    err-str: text,
  )
}

data process-error {
| Command-Execution-Error(command-error)
| Setup-Error(text)
}

// T.intercalate "\n" $ map ("  " <>) $ T.splitOn "\n" t
define _indent(t: &text): text {
  let ts = split(t, "\n");
  let ts =
    for-each(ts, function (t) {
      pin t = t;
      core.text.append("  ", t)
    });
  intercalate(ts, *"\n")
}

define _text-from-process-error(pe: process-error): text {
  match pe {
  | Command-Execution-Error(Command-Error(Spec of {cmd-spec}, exit-code, err-str)) =>
    let Process-Spec of {process} = cmd-spec;
    let buf = make-text-builder(64);
    pin err-str = err-str;
    let _ on buf = {
      append-text(buf, "The child process `");
      append-text(buf, process);
      append-text(buf, "` failed with the following message (exit-code = ");
      append-int64-UTF8(buf, exit-code);
      append-text(buf, "):\n");
      pin v = _indent(err-str);
      append-text(buf, v);
    };
    core.text-builder.extract(buf)
  | Setup-Error(t) =>
    t
  }
}

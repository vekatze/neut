import {
  core.cell {borrow, extract, make-cell, mutate},
  core.dictionary {dictionary, empty, make-insert-with, make-lookup, to-list},
  core.list {fold-left},
  core.magic {cast},
  this.kernel.common.module {Module, module},
  this.language.common.module-id {module-id, module-id-ord},
}

inline rev-map: type {
  dictionary(module-id, list(module-id))
}

data antecedent-kit {
| _Antecedent-Kit(
    map-cell: cell(dictionary(module-id, module)),
    rev-map-cell: cell(dictionary(module-id, list(module-id))),
  )
}

define make-antecedent-kit(): antecedent-kit {
  let map-cell = make-cell(box {empty});
  let rev-map-cell = make-cell(box {empty});
  _Antecedent-Kit of {map-cell, rev-map-cell}
}

define lookup-module(k: &antecedent-kit, x: &module-id): ?module {
  tie _Antecedent-Kit of {map-cell} = k;
  let lookup = make-lookup(module-id-ord);
  borrow(map-cell, function (dict) {
    match lookup(dict, x) {
    | Left(_) =>
      box {none}
    | Right(v) =>
      box v {Right(v)}
    }
  })
}

inline _dictionary-meta-in<k, v>(dict: meta dictionary(k, v)): dictionary(meta k, meta v) {
  cast(_, _, dict)
}

define _rev-insert(mp: meta rev-map, v: meta module, k: meta module-id): meta rev-map {
  box {
    letbox mp = mp;
    letbox k = k;
    letbox v = v;
    let Module of {id} = v;
    let insert = make-insert-with(module-id-ord, exact core.list.append);
    insert(mp, id, List[k])
  }
}

define set(k: &antecedent-kit, !mp: meta dictionary(module-id, module)): unit {
  tie _Antecedent-Kit of {map-cell, rev-map-cell} = k;
  mutate(map-cell, function (_) {
    !mp
  });
  mutate(rev-map-cell, function (dict) {
    let other-mp = to-list(_dictionary-meta-in(!mp));
    fold-left(dict, other-mp, function (d, p) {
      let Pair(mid, m) = p;
      _rev-insert(d, m, mid)
    })
  });
}

define get-reverse-map(k: antecedent-kit): meta rev-map {
  let _Antecedent-Kit of {rev-map-cell} = k;
  extract(rev-map-cell)
}

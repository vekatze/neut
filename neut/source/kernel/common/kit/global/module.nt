import {
  core.cell {make-cell},
  core.dictionary {dictionary, empty},
  core.system {get-error-message, system, system-error},
  path.io {create-directory, is-directory},
  path.path {split-extension},
  this.app.app {app},
  this.app.run {app-from-system, raise-error, raise-error'},
  this.kernel.common.const {source-file-extension},
  this.kernel.common.module {Module, extract-module, get-module-root-dir, main-module, module},
  this.language.common.module-id {Base, Library, Main, module-id},
  this.logger.hint {hint},
}

data module-kit {
| _Module-Kit(
    cache-map-cell: cell(dictionary(text, module)),
  )
}

define make-module-kit(): module-kit {
  let cache-map-cell = make-cell(box {empty});
  _Module-Kit of {cache-map-cell}
}

define _has-source-extension(path: &text): bool {
  let Pair(_, ext) = split-extension(path);
  pin ext = ext;
  eq-text(ext, source-file-extension)
}

define _ensure-directory(path: &text): system(unit) {
  if is-directory(path) {
    Right(Unit)
  } else {
    create-directory(path)
  }
}

define _return-directory(path: text): app(text) {
  let result: either(system-error, unit) on path = _ensure-directory(path);
  match result {
  | Left(e) =>
    raise-error'(get-error-message(e))
  | Right(_) =>
    Right(path)
  }
}

define zen(): unit {
  pin result = _has-source-extension("foo.nt");
  vet(result);
  pin result = _has-source-extension("foo.txt");
  vet(result);
  pin result = _has-source-extension("nt");
  vet(result);
}

import {
  core.cell {clone, make-cell, mutate},
  core.dictionary {make-lookup},
  core.text {to-binary},
  core.text-builder {append-text, extract, make-text-builder},
  path.path {split-extension, take-last},
  this.app.app {app},
  this.app.run {app-from-system, raise-error'},
  this.ens.ens {E-String, dict-from-list, inject},
  this.ens.to-doc,
  this.kernel.common.clang-option {Clang-Option, clang-option},
  this.kernel.common.const {artifact-rel-dir, entry-rel-dir, foreign-rel-dir},
  this.kernel.common.kit.global.module {_ensure-directory},
  this.kernel.common.kit.global.platform {get-base-build-dir, get-clang-digest, platform-kit},
  this.kernel.common.module {Module, extract-module, main-module, module},
  this.kernel.common.target {Main, Named, Peripheral, Peripheral-Single, Target-Summary, Zen, target},
  this.language.common.digest {hash-and-encode},
  this.language.common.module-id {Library},
  this.logger.hint {hint, internal-hint},
  this.logger.logger-kit {logger-kit},
  this.path.read {read-text-from-path},
}

data path-kit {
| _Path-Kit(
    main-module: &main-module,
    cache-cell: cell(?text),
    logger-kit: &logger-kit,
    platform-kit: &platform-kit,
  )
}

define make-path-kit(mm: &main-module, lk: &logger-kit, pk: &platform-kit): path-kit {
  let cache-cell = make-cell(box {none});
  _Path-Kit(mm, cache-cell, lk, pk)
}

define get-base-name(path: &text): text {
  pin bar = take-last(path);
  let Pair(buz, _) = split-extension(bar);
  buz
}

define ensure-not-in-dependency-dir(m: &main-module): app(unit) {
  tie Module of {id} = extract-module(m);
  case id {
  | Library(_) =>
    raise-error'(*"This command cannot be used under a dependency directory")
  | _ =>
    Right(Unit)
  }
}

define _get-clang-option(t: &target, m: &module): app(clang-option) {
  case t {
  | Main(main-module) =>
    case main-module {
    | Named(name, _) =>
      tie Module of {target} = m;
      let lookup = make-lookup(core.text.ord.as-ord);
      match lookup(target, name) {
      | Left(_) =>
        let buf = make-text-builder(64);
        let _ on buf = {
          append-text(buf, "No such target is defined: `");
          append-text(buf, name);
          append-text(buf, "`");
        };
        raise-error'(extract(buf))
      | Right(v) =>
        tie Target-Summary of {clang-option} = v;
        Right(*clang-option)
      }
    | Zen(_, clang-option) =>
      Right(*clang-option)
    }
  | Peripheral =>
    Right(this.kernel.common.clang-option.empty-clang-option)
  | Peripheral-Single(_) =>
    Right(this.kernel.common.clang-option.empty-clang-option)
  }
}

inline _m: hint {
  internal-hint
}

define _get-build-signature(k: &path-kit, t: &target): app(text) {
  tie _Path-Kit of {cache-cell, platform-kit, main-module} = k;
  match clone(cache-cell) {
  | Right(sig) =>
    Right(sig)
  | Left(_) =>
    let m = extract-module(*main-module);
    tie Module of {location} = m;
    let clang-digest = get-clang-digest(*platform-kit);
    try Clang-Option of {compile-option, link-option} = _get-clang-option(t, m);
    let compile-option-text = core.text.intercalate(compile-option, *" ");
    let link-option-text = core.text.intercalate(link-option, *" ");
    try module-ens = read-text-from-path(location);
    let ens =
      dict-from-list(_m, List[
        Pair(Pair(_m, *"clang-digest"), E-String(_m, *clang-digest)),
        Pair(Pair(_m, *"compile-option"), E-String(_m, compile-option-text)),
        Pair(Pair(_m, *"link-option"), E-String(_m, link-option-text)),
        Pair(Pair(_m, *"module-configuration"), E-String(_m, module-ens)),
      ]);
    let ens-text = this.ens.to-doc.pp(inject(ens));
    let !sig on ens-text = hash-and-encode(to-binary(ens-text));
    let _ = ens-text;
    mutate(cache-cell, function (_) {
      quote {Right(!sig)}
    });
    Right(!sig)
  }
}

define _get-build-dir(k: &path-kit, t: &target, m: &module): app(text) {
  tie _Path-Kit of {platform-kit} = k;
  let base-build-dir = get-base-build-dir(*platform-kit, m);
  try build-signature = _get-build-signature(k, t);
  let build-prefix on build-signature = core.text.append("build-", build-signature);
  let result on base-build-dir, build-prefix = core.text.append(base-build-dir, build-prefix);
  let _ = build-signature;
  let _ = base-build-dir;
  let _ = build-prefix;
  Right(result)
}

define _get-artifact-dir(k: &path-kit, t: &target, m: &module): app(text) {
  try build-dir = _get-build-dir(k, t, m);
  let result on build-dir = core.text.append(build-dir, artifact-rel-dir);
  let _ = build-dir;
  Right(result)
}

define _get-foreign-dir(k: &path-kit, t: &target, m: &module): app(text) {
  try build-dir = _get-build-dir(k, t, m);
  let result on build-dir = core.text.append(build-dir, foreign-rel-dir);
  let _ = build-dir;
  let app-result on result = _ensure-directory(result);
  try _ = app-from-system(app-result);
  Right(result)
}

define _get-entry-dir(k: &path-kit, t: &target, m: &module): app(text) {
  try build-dir = _get-build-dir(k, t, m);
  let result on build-dir = core.text.append(build-dir, entry-rel-dir);
  let _ = build-dir;
  Right(result)
}

define zen(): unit {
  pin x = get-base-name("foo/bar/buz.nt");
  vet(x);
}

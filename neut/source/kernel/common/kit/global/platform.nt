import {
  core.control {discard},
  core.environment {get-env},
  core.process {Process-Spec},
  core.text {to-binary},
  this.app.app {app},
  this.app.run {raise-error', run},
  this.kernel.common.arch {arch, data-size-from-arch},
  this.kernel.common.const {env-var-clang},
  this.kernel.common.operating-system {operating-system},
  this.kernel.common.platform {Platform, platform},
  this.kernel.common.run-process {get-logger-kit, run-process, run-process-kit},
  this.language.common.data-size {data-size},
  this.language.common.digest {hash-and-encode},
  this.logger.print {report},
}

data platform-kit {
| _Platform-Kit(
    arch: arch,
    operating-system: operating-system,
    clang-digest: text,
    base-size: data-size,
  )
}

define get-arch(k: &platform-kit): arch {
  tie _Platform-Kit of {arch} = k;
  *arch
}

define get-operating-system(k: &platform-kit): operating-system {
  tie _Platform-Kit of {operating-system} = k;
  *operating-system
}

define get-platform(k: &platform-kit): platform {
  let arch = get-arch(k);
  let operating-system = get-operating-system(k);
  Platform(operating-system, arch)
}

define get-data-size(k: &platform-kit): data-size {
  tie _Platform-Kit of {base-size} = k;
  *base-size
}

define get-clang-digest(k: &platform-kit): &text {
  tie _Platform-Kit of {clang-digest} = k;
  clang-digest
}

define _get-current-arch(): arch {
  introspect architecture {
  | amd64 =>
    this.kernel.common.arch.Amd64
  | arm64 =>
    this.kernel.common.arch.Arm64
  }
}

define _get-current-operating-system(): operating-system {
  introspect operating-system {
  | linux =>
    this.kernel.common.operating-system.Linux
  | darwin =>
    this.kernel.common.operating-system.Darwin
  }
}

define _get-clang(): text {
  match get-env(env-var-clang) {
  | Left(_) =>
    *"clang"
  | Right(clang) =>
    clang
  }
}

define _calculate-clang-digest(k: &run-process-kit): app(text) {
  let clang = _get-clang();
  let spec = Process-Spec of {process := clang, args := List[*"--version"], cwd := none, input := *""};
  match run-process(k, spec) {
  | Right(v) =>
    let result on v = hash-and-encode(to-binary(v));
    let message on v = core.text.append("Clang info:\n", v);
    report(get-logger-kit(k), message);
    discard(v);
    Right(result)
  | Left(err) =>
    raise-error'(err)
  }
}

define make-platform-kit(k: &run-process-kit): platform-kit {
  run(get-logger-kit(k), {
    let arch = _get-current-arch();
    let base-size = data-size-from-arch(arch);
    let operating-system = _get-current-operating-system();
    try clang-digest = _calculate-clang-digest(k);
    Right(_Platform-Kit of {
      arch,
      operating-system,
      base-size,
      clang-digest,
    })
  })
}

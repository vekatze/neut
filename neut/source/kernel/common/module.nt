import {
  core.dictionary {dictionary},
  this.kernel.common.module-URL {module-URL},
  this.kernel.common.target {target-summary},
  this.kernel.common.zen-config {zen-config},
  this.language.common.base-name {base-name},
  this.language.common.module-alias {module-alias},
  this.language.common.module-digest {module-digest},
  this.language.common.module-id {module-id},
}

inline locator-name: type {
  text
}

inline preset-map: type {
  dictionary(locator-name, list(base-name))
}

inline alias-preset-map: type {
  dictionary(text, preset-map)
}

data dependency {
| Dependency(
    mirror-list: list(module-URL),
    digest: module-digest,
    preset-enabled: bool,
  )
}

data foreign {
| Foreign(
    input: list(text),
    output: list(text),
    script: list(text),
  )
}

inline target-name: type {
  text
}

data module {
| Module(
    id: module-id,
    source-dir: text,
    target: dictionary(target-name, target-summary),
    zenconfig: zen-config,
    archive-dir: text,
    cache-dir: text,
    dependency: dictionary(module-alias, dependency),
    extra-contents: list(text),
    antecedents: list(module-digest),
    location: text,
    foreign: foreign,
    static-files: dictionary(text, text),
    inline-limit: ?int,
    preset-map: preset-map,
  )
}

data main-module {
| Main-Module(module)
}

define extract-module(m: main-module): module {
  let Main-Module(m) = m;
  m
}

inline key-archive: &text {
  "archive"
}

inline key-cache: &text {
  "cache"
}

inline key-source: &text {
  "source"
}

inline key-target: &text {
  "target"
}

inline key-zen: &text {
  "zen"
}

inline key-main: &text {
  "main"
}

import {
  core.text-builder {append-text, extract, make-text-builder},
  path.path {split-extension},
  this.app.app {app},
  this.app.run {raise-critical'},
  this.kernel.common.module {get-source-dir, module},
  this.language.common.const {ns-sep},
  this.logger.hint {hint},
}

data source {
| Source(
    file-path: text,
    source-module: module,
    source-hint: ?hint,
  )
}

define get-rel-path-from-source-dir(s: &source): app(text) {
  tie Source of {source-module, file-path} = s;
  match this.kernel.common.module.get-rel-path-from-source-dir(source-module, file-path) {
  | Left(_) =>
    let buf = make-text-builder(64);
    let _ on buf = {
      pin source-dir = get-source-dir(source-module);
      append-text(buf, "The file\n  ");
      append-text(buf, file-path);
      append-text(buf, "\nis not an element of\n  ");
      append-text(buf, source-dir);
    };
    raise-critical'(extract(buf))
  | Right(rel-path) =>
    Right(rel-path)
  }
}

define get-base-readable-locator(s: &source): app(text) {
  try rel-path = get-rel-path-from-source-dir(s);
  let Pair(rel-path-without-extension, _) on rel-path = split-extension(rel-path);
  let result on rel-path-without-extension = core.text.replace(rel-path-without-extension, "/", *ns-sep);
  let _ = rel-path;
  let _ = rel-path-without-extension;
  Right(result)
}

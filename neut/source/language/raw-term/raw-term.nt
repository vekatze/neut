import {
  core.list {for-each},
  core.pair {first},
  this.language.raw-term.raw-binder {raw-binder},
  this.language.raw-term.raw-pattern {raw-pattern},
  this.logger.hint {hint},
  this.syntax-tree.comment {comment},
  this.syntax-tree.series {empty-series-paren-comma, series},
}

data raw-term {
| Tau(hint)
}

data pat-param(a) {
| Pat-Param(hint, raw-pattern, comment, comment, a)
}

inline args(a) {
  pair(series(raw-binder(a)), comment)
}

inline imp-args(a) {
  pair(series(pair(raw-binder(a), ?a)), comment)
}

define empty-args<a>(): args(a) {
  Pair(empty-series-paren-comma(), Nil)
}

define empty-imp-args<a>(): imp-args(a) {
  Pair(empty-series-paren-comma(), Nil)
}

define extract-args<a>(x: args(a)): list(raw-binder(a)) {
  let Pair(series, _) = x;
  this.syntax-tree.series.extract(series)
}

define extract-imp-args<a>(x: imp-args(a)): list(raw-binder(a)) {
  let Pair(series, _) = x;
  for-each(this.syntax-tree.series.extract(series), exact first)
}

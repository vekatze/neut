import {
  this.language.common.binder {binder-f},
  this.language.common.lam-kind {Normal, from-lam-kind, lam-kind-f},
}

inline _ID: type {
  int
}

data attr-lam(a) {
| Attr-Lam(
    lam-kind: lam-kind-f(a),
    identity: _ID,
  )
}

define normal<a>(i: _ID, cod-type: a): attr-lam(a) {
  Attr-Lam of {
    lam-kind := Normal(none, cod-type),
    identity := i,
  }
}

define normal-with-name<a>(name: ?text, i: _ID, cod-type: a): attr-lam(a) {
  Attr-Lam of {
    lam-kind := Normal(name, cod-type),
    identity := i,
  }
}

define binder-from-attr-lam<a>(attr: &attr-lam(a)): ?&binder-f(a) {
  tie Attr-Lam of {lam-kind} = attr;
  from-lam-kind(lam-kind)
}

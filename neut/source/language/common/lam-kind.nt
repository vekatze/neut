import {
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.instance.either {either-sero},
  sero.instance.text {text-sero},
  sero.sero {Sero, sero},
  this.language.common.binder {binder-f, binder-sero},
  this.logger.sero.log {_unit-sero},
}

data lam-kind-f(a) {
| Normal(?text, a)
| Fix(binder-f(a))
}

define from-lam-kind<a>(k: &lam-kind-f(a)): ?&binder-f(a) {
  case k {
  | Fix(x) =>
    Right(x)
  | _ =>
    none
  }
}

inline lam-kind-sero<a>(!s: sero(a)): sero(lam-kind-f(a)) {
  let Sero of {put := put-a, get := get-a} = !s;
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Normal(t, x) =>
          let Sero of {put} = either-sero(_unit-sero, text-sero);
          put-int64(k, 0);
          put(k, t);
          put-a(k, x);
        | Fix(x) =>
          let Sero of {put := put-binder} = binder-sero(!s);
          put-int64(k, 1);
          put-binder(k, x);
        }
      }
    },
    get := {
      function (k) {
        try tag = get-int64(k);
        match tag {
        | 0 =>
          let Sero of {get} = either-sero(_unit-sero, text-sero);
          try t = get(k);
          try x = get-a(k);
          Right(box {
            letbox t = t;
            letbox x = x;
            Normal(t, x)
          })
        | 1 =>
          let Sero of {get := get-binder} = binder-sero(!s);
          try b = get-binder(k);
          Right(box {
            letbox b = b;
            Fix(b)
          })
        | _ =>
          none
        }
      }
    },
  }
}

import {
  core.box {axiom-T},
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.instance.rune {rune-sero},
  sero.sero {Sero, sero},
}

data literal {
| Int(int)
| Rune(rune)
}

inline literal-sero: sero(literal) {
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Int(i) =>
          put-int64(k, 0);
          put-int64(k, *i);
        | Rune(r) =>
          put-int64(k, 0);
          let Sero of {put} = rune-sero;
          put(k, r);
        }
      }
    },
    get := {
      function (k) {
        try tag = get-int64(k);
        match tag {
        | 0 =>
          try i = get-int64(k);
          Right(quote {Int(i)})
        | 1 =>
          let Sero of {get} = rune-sero;
          try r = get(k);
          Right(quote {Rune(axiom-T(r))})
        | _ =>
          none
        }
      }
    },
  }
}

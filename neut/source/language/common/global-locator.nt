import {
  this.app.app {app},
  this.app.run {raise-error},
  this.language.common.base-name {base-name, base-name-by-split},
  this.language.common.const {ns-sep},
  this.language.common.module-alias {Module-Alias, module-alias, text-from-module-alias},
  this.language.common.source-locator {source-locator, source-locator-from-base-name-list, text-from-source-locator},
  this.logger.hint {hint},
}

data global-locator {
| Global-Locator(
    module-alias: module-alias,
    source-locator: source-locator,
  )
}

define text-from-global-locator(gl: &global-locator): text {
  tie Global-Locator of {module-alias, source-locator} = gl;
  pin t1 = text-from-module-alias(*module-alias);
  pin t2 = text-from-source-locator(source-locator);
  pin tmp = core.text.append(t1, ns-sep);
  core.text.append(tmp, t2)
}

define global-locator-from-text(m: &hint, t: &text): app(global-locator) {
  try base-name-list = base-name-by-split(m, t);
  match base-name-list {
  | Cons(prefix, rest) =>
    let locator = source-locator-from-base-name-list(rest);
    Right(Global-Locator(Module-Alias(prefix), locator))
  | Nil =>
    let error-message = {
      pin t1 = core.text.append("Invalid global locator: `", t);
      core.text.append(t1, "`")
    };
    raise-error(*m, error-message)
  }
}

define _global-locator-from-base-name-list(m: &hint, xs: list(base-name)): app(global-locator) {
  match xs {
  | Nil =>
    raise-error(*m, *"Empty string cannot be converted into a global locator")
  | Cons(prefix, rest) =>
    let locator = source-locator-from-base-name-list(rest);
    Right(Global-Locator(Module-Alias(prefix), locator))
  }
}

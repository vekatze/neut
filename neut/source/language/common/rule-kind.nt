import {
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.get-kit {get-kit},
  sero.put-kit {put-kit},
  sero.sero {Sero, sero},
}

data rule-kind {
| Fold-Left
| Fold-Right
}

define keyword-from-rule-kind(k: rule-kind): &text {
  match k {
  | Fold-Left =>
    "rule-left"
  | Fold-Right =>
    "rule-right"
  }
}

define rule-kind-sero: sero(rule-kind) {
  Sero of {
    put := {
      function (k: &put-kit, v: &rule-kind) {
        case v {
        | Fold-Left =>
          put-int64(k, 0)
        | Fold-Right =>
          put-int64(k, 1)
        }
      }
    },
    get := {
      function (k: &get-kit) {
        try v = get-int64(k);
        match v {
        | 0 =>
          Right(quote {Fold-Left})
        | 1 =>
          Right(quote {Fold-Right})
        | _ =>
          none
        }
      }
    },
  }
}

import {
  core.text {split},
  core.trick {panic},
  this.language.common.base-name {base-name, form, imm-int1, imm-int2, imm-noema, imm-type, leaf, node, root, text-from-base-name},
  this.language.common.const {ns-sep},
  this.language.common.local-locator {local-locator, make-local-locator, text-from-local-locator},
  this.language.common.module-digest {Module-Digest},
  this.language.common.module-id {Base, Library, Main, module-id},
  this.language.common.source-locator {internal-locator},
  this.language.common.strict-global-locator {sgl-from-source-locator, strict-global-locator, text-from-strict-global-locator},
}

data definite-description {
| _Definite-Description(text)
}

define new-dd(gl: &strict-global-locator, ll: local-locator): definite-description {
  pin tmp = text-from-strict-global-locator(gl);
  pin tmp = core.text.append(tmp, ns-sep);
  pin ll = text-from-local-locator(ll);
  let tmp = core.text.append(tmp, ll);
  _Definite-Description(tmp)
}

define _new-by-global-locator(gl: &strict-global-locator, name: base-name): definite-description {
  new-dd(gl, make-local-locator(name))
}

define _wrap-with-quote(x: &text): text {
  pin tmp = core.text.append("\"", x);
  core.text.append(tmp, "\"")
}

define _to-low-name(dd: &definite-description): text {
  tie _Definite-Description(t) = dd;
  _wrap-with-quote(t)
}

define _get-form-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin form = text-from-base-name(form);
  let tmp = core.text.append(tmp, form);
  _Definite-Description(tmp)
}

define _get-node-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin node = text-from-base-name(node);
  let tmp = core.text.append(tmp, node);
  _Definite-Description(tmp)
}

define _get-leaf-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin leaf = text-from-base-name(leaf);
  let tmp = core.text.append(tmp, leaf);
  _Definite-Description(tmp)
}

define _get-root-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin root = text-from-base-name(root);
  let tmp = core.text.append(tmp, root);
  _Definite-Description(tmp)
}

define uncons-dd(dd: &definite-description): pair(module-id, text) {
  tie _Definite-Description(t) = dd;
  let names = split(t, ns-sep);
  match names {
  | Cons(head-elem, rest) =>
    let b1 on head-elem = eq-text(head-elem, "this");
    let b2 on head-elem = eq-text(head-elem, "base");
    if b1 {
      Pair(Main, core.text.intercalate(rest, *ns-sep))
    } else-if b2 {
      Pair(Base, core.text.intercalate(rest, *ns-sep))
    } else {
      Pair(Library(Module-Digest(head-elem)), core.text.intercalate(rest, *ns-sep))
    }
  | _ =>
    panic("language.common.definite-description.uncons-dd")
  }
}

define global-locator-from-dd(dd: &definite-description): text {
  tie _Definite-Description(t) = dd;
  let names = split(t, ns-sep);
  match core.list.unsnoc(names) {
  | Right(Pair(xs, _)) =>
    core.text.intercalate(xs, *ns-sep)
  | _ =>
    panic("language.common.definite-description.global-locator-from-dd")
  }
}

define local-locator-from-dd(dd: &definite-description): text {
  tie _Definite-Description(t) = dd;
  let names = split(t, ns-sep);
  match core.list.unsnoc(names) {
  | Right(Pair(_, last)) =>
    last
  | _ =>
    panic("language.common.definite-description.local-locator-from-dd")
  }
}

define imm-type-dd(): definite-description {
  pin tmp = sgl-from-source-locator(internal-locator());
  _new-by-global-locator(tmp, imm-type)
}

define imm-noema-dd(): definite-description {
  pin tmp = sgl-from-source-locator(internal-locator());
  _new-by-global-locator(tmp, imm-noema)
}

define imm-int1-dd(): definite-description {
  pin tmp = sgl-from-source-locator(internal-locator());
  _new-by-global-locator(tmp, imm-int1)
}

define imm-int2-dd(): definite-description {
  pin tmp = sgl-from-source-locator(internal-locator());
  _new-by-global-locator(tmp, imm-int2)
}

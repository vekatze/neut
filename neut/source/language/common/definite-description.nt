import {
  this.language.common.base-name {base-name, form, node, text-from-base-name},
  this.language.common.const {ns-sep},
  this.language.common.local-locator {local-locator, make-local-locator, text-from-local-locator},
  this.language.common.strict-global-locator {strict-global-locator, text-from-strict-global-locator},
}

data definite-description {
| _Definite-Description(text)
}

define new-dd(gl: &strict-global-locator, ll: local-locator): definite-description {
  pin tmp = text-from-strict-global-locator(gl);
  pin tmp = core.text.append(tmp, ns-sep);
  pin ll = text-from-local-locator(ll);
  let tmp = core.text.append(tmp, ll);
  _Definite-Description(tmp)
}

define _new-by-global-locator(gl: &strict-global-locator, name: base-name): definite-description {
  new-dd(gl, make-local-locator(name))
}

define _wrap-with-quote(x: &text): text {
  pin tmp = core.text.append("\"", x);
  core.text.append(tmp, "\"")
}

define _to-low-name(dd: &definite-description): text {
  tie _Definite-Description(t) = dd;
  _wrap-with-quote(t)
}

define _get-form-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin form = text-from-base-name(form);
  let tmp = core.text.append(tmp, form);
  _Definite-Description(tmp)
}

define _get-node-dd(dd: &definite-description): definite-description {
  tie _Definite-Description(t) = dd;
  pin tmp = core.text.append(t, "#");
  pin node = text-from-base-name(node);
  let tmp = core.text.append(tmp, node);
  _Definite-Description(tmp)
}

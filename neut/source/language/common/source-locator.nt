import {
  core.list {for-each},
  core.text {replace},
  sero.common.get {get-text},
  sero.common.put {put-text},
  sero.sero {Sero, sero},
  this.language.common.base-name {base-name, text-from-base-name},
  this.language.common.const {ns-sep},
}

data source-locator {
| Source-Locator(text)
}

define text-from-source-locator(sl: &source-locator): text {
  tie Source-Locator(x) = sl;
  replace(x, "/", *ns-sep)
}

define source-locator-from-base-name-list(bns: list(base-name)): source-locator {
  Source-Locator(core.text.intercalate(for-each(bns, text-from-base-name), *"/"))
}

define llvm-locator(): source-locator {
  Source-Locator(*"llvm")
}

define internal-locator(): source-locator {
  Source-Locator(*"#")
}

define get-rel-path-text(sl: source-locator): text {
  let Source-Locator(x) = sl;
  x
}

inline source-locator-sero: sero(source-locator) {
  Sero of {
    put := {
      function (k, v) {
        tie Source-Locator(x) = v;
        put-text(k, x);
      }
    },
    get := {
      function (k) {
        try t = get-text(k);
        Right(box {
          letbox t = quote {t};
          Source-Locator(t)
        })
      }
    },
  }
}

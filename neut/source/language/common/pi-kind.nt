import {
  core.box {axiom-T},
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.instance.bool {bool-sero},
  sero.sero {Sero, sero},
  this.language.common.is-const-like {is-const-like},
}

data pi-kind {
| Normal(is-const-like)
| Data-Intro(is-const-like)
}

inline pi-kind-sero: sero(pi-kind) {
  let Sero of {put} = bool-sero;
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Normal(b) =>
          put-int64(k, 0);
          put(k, b)
        | Data-Intro(b) =>
          put-int64(k, 1);
          put(k, b)
        }
      }
    },
    get := {
      function (k) {
        let Sero of {get} = bool-sero;
        try tag = get-int64(k);
        try b = get(k);
        if eq-int(tag, 0) {
          Right(quote {Normal(axiom-T(b))})
        } else {
          Right(quote {Data-Intro(axiom-T(b))})
        }
      }
    },
  }
}

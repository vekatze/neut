import {
  core.box {axiom-T},
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.sero {Sero, sero},
  this.language.common.prim-num-size {float-size, float-size-sero, int-size, int-size-sero},
}

data base-prim-type-size(a) {
| Explicit(a)
| Implicit(a)
}

data base-prim-type {
| Int(base-prim-type-size(int-size))
| Float(base-prim-type-size(float-size))
}

define extract-size<a>(size: base-prim-type-size(a)): a {
  match size {
  | Explicit(s) =>
    s
  | Implicit(s) =>
    s
  }
}

inline base-prim-type-size-sero<a>(x: sero(a)): sero(base-prim-type-size(a)) {
  let Sero of {get, put} = x;
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Explicit(s) =>
          put-int64(k, 0);
          put(k, s)
        | Implicit(s) =>
          put-int64(k, 1);
          put(k, s)
        }
      }
    },
    get := {
      function (k) {
        try tag = get-int64(k);
        try v = get(k);
        match tag {
        | 0 =>
          Right(box {
            letbox v = v;
            Explicit(v)
          })
        | 1 =>
          Right(box {
            letbox v = v;
            Implicit(v)
          })
        | _ =>
          none
        }
      }
    },
  }
}

inline base-prim-type-sero: sero(base-prim-type) {
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Int(s) =>
          let Sero of {put} = base-prim-type-size-sero(int-size-sero);
          put-int64(k, 0);
          put(k, s)
        | Float(s) =>
          let Sero of {put} = base-prim-type-size-sero(float-size-sero);
          put-int64(k, 1);
          put(k, s)
        }
      }
    },
    get := {
      function (k) {
        try tag = get-int64(k);
        match tag {
        | 0 =>
          let Sero of {get} = base-prim-type-size-sero(int-size-sero);
          try v = get(k);
          Right(quote {Int(axiom-T(v))})
        | 1 =>
          let Sero of {get} = base-prim-type-size-sero(float-size-sero);
          try v = get(k);
          Right(quote {Float(axiom-T(v))})
        | _ =>
          none
        }
      }
    },
  }
}

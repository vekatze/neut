import {
  core.list {for-each-E},
  core.text {is-empty},
  this.app.error {error, new-error, new-error'},
  this.language.common.const {ns-sep},
  this.logger.hint {hint, internal-hint},
}

data base-name {
| Base-Name(text)
}

define base-name-by-split(m: hint, name: &text): either(error, list(base-name)) {
  for-each-E(core.text.split(name, ns-sep), function (t) {
    let b on t = is-empty(t);
    if b {
      Left(new-error(m, core.text.append("No succeeding dots are allowed here: ", name)))
    } else {
      Right(Base-Name(t))
    }
  })
}

define base-name-from-text(m: hint, name: &text): either(error, base-name) {
  let tmp = core.text.split(name, ns-sep);
  match tmp {
  | Cons(b, Nil) =>
    Right(Base-Name(b))
  | _ =>
    Left(new-error(m, core.text.append("No dots are allowed here: ", name)))
  }
}

define base-name-from-text-without-hint(name: &text): either(error, base-name) {
  let tmp = core.text.split(name, ns-sep);
  match tmp {
  | Cons(b, Nil) =>
    Right(Base-Name(b))
  | _ =>
    Left(new-error'(core.text.append("No dots are allowed here: ", name)))
  }
}

define zen(): unit {
  pin v = base-name-from-text(internal-hint, "foo.bar");
  vet(v);
  pin v = base-name-by-split(internal-hint, "foo.bar");
  vet(v);
}

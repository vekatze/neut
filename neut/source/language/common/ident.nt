import {
  core.int.show {show-int},
  this.language.common.const {exp-var-prefix, hole-var-prefix},
}

data ident {
| I(text, int)
}

define eq-ident(x: &ident, y: &ident): bool {
  tie I(_, x) = x;
  tie I(_, y) = y;
  eq-int(*x, *y)
}

define cmp-ident(x: &ident, y: &ident): ordering {
  tie I(_, x) = x;
  tie I(_, y) = y;
  if lt-int(*x, *y) {
    LT
  } else-if gt-int(*x, *y) {
    GT
  } else {
    EQ
  }
}

define show-ident(x: &ident): text {
  tie I(s, i) = x;
  pin i = show-int(*i);
  pin tmp = core.text.append("-", i);
  core.text.append(s, tmp)
}

define is-hole(x: &ident): bool {
  tie I(name, _) = x;
  core.text.eq.eq-prefix(name, hole-var-prefix)
}

define is-cartesian(x: &ident): bool {
  tie I(name, _) = x;
  core.text.eq.eq-prefix(name, exp-var-prefix)
}

define zen(): unit {
  pin x = I(*"{}test", 3);
  pin b = is-hole(x);
  vet(b);
  pin b = is-cartesian(x);
  vet(b);
  pin x = show-ident(x);
  vet(x);
}

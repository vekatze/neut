import {
  core.int.show {show-int},
  sero.common.get {get-int64, get-text},
  sero.common.put {put-int64, put-text},
  sero.sero {Sero, sero},
  this.language.common.const {exp-var-prefix, hole-var-prefix},
}

data ident {
| I(text, int)
}

define eq-ident(x: &ident, y: &ident): bool {
  tie I(_, x) = x;
  tie I(_, y) = y;
  eq-int(*x, *y)
}

define cmp-ident(x: &ident, y: &ident): ordering {
  tie I(_, x) = x;
  tie I(_, y) = y;
  if lt-int(*x, *y) {
    LT
  } else-if gt-int(*x, *y) {
    GT
  } else {
    EQ
  }
}

define show-ident(x: &ident): text {
  tie I(s, i) = x;
  pin i = show-int(*i);
  pin tmp = core.text.append("-", i);
  core.text.append(s, tmp)
}

define is-hole(x: &ident): bool {
  tie I(name, _) = x;
  core.text.eq.eq-prefix(name, hole-var-prefix)
}

define is-cartesian(x: &ident): bool {
  tie I(name, _) = x;
  core.text.eq.eq-prefix(name, exp-var-prefix)
}

inline ident-sero: sero(ident) {
  Sero of {
    put := {
      function (k, v) {
        tie I(t, i) = v;
        put-text(k, t);
        put-int64(k, *i);
      }
    },
    get := {
      function (k) {
        try t = get-text(k);
        try i = get-int64(k);
        Right(box {
          letbox t = quote {t};
          letbox i = quote {i};
          I(t, i)
        })
      }
    },
  }
}

define zen(): unit {
  pin x = I(*"{}test", 3);
  pin b = is-hole(x);
  vet(b);
  pin b = is-cartesian(x);
  vet(b);
  pin x = show-ident(x);
  vet(x);
}

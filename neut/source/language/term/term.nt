import {
  sero.common.get {get-int64},
  sero.common.put {put-int64},
  sero.sero {Sero, sero},
  this.logger.hint {hint},
}

data term-f(a) {
| Tau(a)
}

inline term: type {
  term-f(hint)
}

inline term-f-sero<a>(!s: sero(a)): sero(term-f(a)) {
  let Sero of {put := !put-a, get := !get-a} = !s;
  Sero of {
    put := {
      function (k, v) {
        case v {
        | Tau(m) =>
          put-int64(k, 0);
          !put-a(k, m);
        }
      }
    },
    get := {
      function (k) {
        try tag = get-int64(k);
        match tag {
        | 0 =>
          try m = !get-a(k);
          Right(box {
            letbox m = m;
            Tau(m)
          })
        | _ =>
          none
        }
      }
    },
  }
}

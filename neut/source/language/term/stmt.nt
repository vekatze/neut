import {
  core.list {filter-some, for-each-N},
  this.language.common.binder {binder-f},
  this.language.common.definite-description {definite-description},
  this.language.common.is-const-like {is-const-like},
  this.language.common.stmt-kind {stmt-kind},
  this.language.term.term {term, term-f},
  this.logger.hint {hint},
}

data stmt-f(a) {
| Stmt-Define(
    b: is-const-like,
    sk: stmt-kind(a),
    m: hint,
    name: definite-description,
    imp-params: list(pair(binder-f(a), ?a)),
    exp-params: list(binder-f(a)),
    cod: a,
    body: a,
  )
}

inline stmt: type {
  stmt-f(term)
}

inline stripped-stmt: type {
  stmt-f(term-f(unit))
}

define get-stmt-name(s: &stmt): ?pair(&hint, &definite-description) {
  case s {
  | Stmt-Define of {m, name} =>
    Right(Pair(m, name))
  }
}

define get-stmt-names(s: &list(stmt)): list(pair(&hint, &definite-description)) {
  filter-some(for-each-N(s, get-stmt-name))
}

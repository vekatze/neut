import {
  core.ansi {
    Background,
    Blue,
    Bold,
    Color,
    Color-16,
    Foreground,
    Italic,
    Normal,
    Red,
    Set-Style,
    Vivid,
    style,
  },
  core.text-builder {append-ansi, append-text, extract, make-text-builder},
}

data color-text {
| Empty
| Join(vector(style), text, color-text)
| Join-N(&vector(style), &text, color-text)
| Join-TN(&text, color-text)
}

define packed(ts: vector(style), t: text): color-text {
  Join(ts, t, Empty)
}

define packed-N(ts: &vector(style), t: &text): color-text {
  Join-N(ts, t, Empty)
}

define packed'(t: text): color-text {
  Join(core.vector.make(4), t, Empty)
}

define packed-N'(t: &text): color-text {
  Join-TN(t, Empty)
}

define _unpacked(t: &color-text): text {
  let b = make-text-builder(64);
  let _ on b = {
    let f =
      define loop(t: &color-text): unit {
        case t {
        | Empty =>
          Unit
        | Join(ts, t, rest) =>
          core.vector.for-N(ts, function (t, _) {
            append-ansi(b, Set-Style(*t));
          });
          append-text(b, t);
          append-ansi(b, Set-Style(Normal));
          loop(rest)
        | Join-N(ts, t, rest) =>
          core.vector.for-N(*ts, function (t, _) {
            append-ansi(b, Set-Style(*t));
          });
          append-text(b, *t);
          append-ansi(b, Set-Style(Normal));
          loop(rest)
        | Join-TN(t, rest) =>
          append-text(b, *t);
          loop(rest)
        }
      };
    f(t)
  };
  extract(b)
}

define _unpacked-uncolored(t: &color-text): text {
  let b = make-text-builder(256);
  let _ on b = {
    let f =
      define loop(t: &color-text): unit {
        case t {
        | Empty =>
          Unit
        | Join(_, t, rest) =>
          append-text(b, t);
          loop(rest)
        | Join-N(_, t, rest) =>
          append-text(b, *t);
          loop(rest)
        | Join-TN(t, rest) =>
          append-text(b, *t);
          loop(rest)
        }
      };
    f(t)
  };
  extract(b)
}

define join(t1: color-text, t2: color-text): color-text {
  match t1 {
  | Empty =>
    t2
  | Join(tones, content, rest) =>
    Join(tones, content, join(rest, t2))
  | Join-N(tones, content, rest) =>
    Join-N(tones, content, join(rest, t2))
  | Join-TN(t, rest) =>
    Join-TN(t, join(rest, t2))
  }
}

rule-right join-full {
  function leaf(_: int): color-text {
    Empty
  },
  function node-left(d: color-text, acc: color-text): color-text {
    join(d, acc)
  },
  function root<a>(x: a): a {
    x
  },
}

define zen(): unit {
  pin t =
    Join(
      Vector[Color(Foreground, Color-16(Vivid, Blue)), Bold],
      *"hello",
      Join(Vector[], *"\n", Empty),
    );
  pin fragment1 = _unpacked(t);
  pin fragment2 = _unpacked-uncolored(t);
  pin t' = packed(Vector[Color(Background, Color-16(Vivid, Red)), Italic], *"sample\n");
  pin fragment3 = _unpacked(t');
  print(fragment1);
  print(fragment2);
  print(fragment3);
  print("sample\n")
}
